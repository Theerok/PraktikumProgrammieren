// <auto-generated />
using AppData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace AppData.Migrations
{
    [DbContext(typeof(AppointmentContext))]
    partial class AppointmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("AppData.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Ressources");

                    b.Property<string>("Room");

                    b.Property<DateTime>("StartTime");

                    b.Property<int?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AppData.Models.AppointmentSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Creator");

                    b.Property<string>("Members");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.ToTable("AppointmentSurveys");
                });

            modelBuilder.Entity("AppData.Models.BookedTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("BookedTimes");
                });

            modelBuilder.Entity("AppData.Models.Ressource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookedTimesId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BookedTimesId");

                    b.ToTable("Ressources");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ressource");
                });

            modelBuilder.Entity("AppData.Models.Beamer", b =>
                {
                    b.HasBaseType("AppData.Models.Ressource");


                    b.ToTable("Beamer");

                    b.HasDiscriminator().HasValue("Beamer");
                });

            modelBuilder.Entity("AppData.Models.Room", b =>
                {
                    b.HasBaseType("AppData.Models.Ressource");

                    b.Property<bool>("BeamerIsAvailable");

                    b.Property<int>("NumberOfSeats");

                    b.Property<bool>("SpeakerIsAvailable");

                    b.ToTable("Room");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("AppData.Models.Appointment", b =>
                {
                    b.HasOne("AppData.Models.AppointmentSurvey", "Survey")
                        .WithMany("Appointments")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("AppData.Models.Ressource", b =>
                {
                    b.HasOne("AppData.Models.BookedTime", "BookedTimes")
                        .WithMany()
                        .HasForeignKey("BookedTimesId");
                });
#pragma warning restore 612, 618
        }
    }
}
